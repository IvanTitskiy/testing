 # -*- coding: utf-8 -*-

import telebot 
from telebot import types
import random
token ="1282827672:AAEGigl4htKIeXbxPI-Hpwe1MODDI9KLcuk"
bot= telebot.TeleBot (token)



#upd =bot.get_updates ()
#print (upd)
#last_upd = upd [-1]
#massage_user = last_upd.message
#print (massage_user)

@bot.message_handler (commands =['pass'])
def handle_menu (message):
   user_markup = telebot.types.ReplyKeyboardMarkup (True, False)
   user_markup.row ('/–ú–µ–Ω—ñ_–ø–æ–≥–∞–Ω–æ')
   user_markup.row ('/–ê–≤—Ç–æ')
   user_markup.row ('/–Ø–∫_—Å–ø—Ä–∞–≤–∏? ‚úî')
   user_markup.row ('/–ü—Ä–∏–±–∏—Ä–∞–Ω–Ω—è', '/–†–æ–±–æ—Ç–∞')
   user_markup.row ('/–ú–∞–ª–µ–Ω—å–∫–∞_–≤–∏—Ç—Ä–∞—Ç–∞?', '/–ó–∞—Ä—è–¥–∫–∞')
   user_markup.row ('/–ü–ª–∞—Ç–æ', '/–†–æ–∑–≤–∏—Ç–æ–∫')
   user_markup.row ('/–°—Ç–æ—Å—É–Ω–∫–∏', '/–ü–æ–ª—ñ—Ç–∏–∫–∞')
   user_markup.row ('/–ö—Ä–µ–¥–∏—Ç')
   user_markup.row ('/–í–∏—Ö—ñ–¥')
   user_markup.row ('/–†–∏–∑–∏–∫')
   user_markup.row ('/–°–æ—Ü_–º–µ—Ä–µ–∂—ñ')
   user_markup.row ('/–°—É–º–Ω–æ')
   user_markup.row ('/–ë–∏–π_–∞–±–æ_–±—ñ–∂–∏')
   user_markup.row ('/–ú–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó')
   user_markup.row ('/–©–æ_—Ä–æ–±–ª—é?')
   bot.send_message (message.from_user.id, 'Hi+10+10', reply_markup=user_markup)



#START –î–ª—è –º–µ–Ω—é


@bot.message_handler (commands =['–ú–µ–Ω—ñ_–ø–æ–≥–∞–Ω–æ'])
def handle_whatch (message):
 #  user_markup = telebot.types.ReplyKeyboardMarkup (True)
  
   markup = types.ReplyKeyboardMarkup(True)

   item1 = types.KeyboardButton("/–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏—Å—å")
   item2 = types.KeyboardButton("/pass")

   markup.add(item1, item2)
   bot.send_message (message.from_user.id, '1) —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ–≥–æ \n  —Å—Ç—Ä–µ—Å vs –Ω–µ–≤—ñ–¥–æ–º—ñ—Å—Ç—å  \n –ö–æ—Ä–∏—Å–Ω–µ vs –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ  \n 2) –í–∏–ø–∏—Å–∞—Ç–∏ –≤—Å—ñ –Ω–µ–±—Ö—ñ–¥–Ω—ñ —Å–ø—Ä–∞–≤–∏  \n 3) –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏—Å—å ', reply_markup=markup)

@bot.message_handler (commands =['–ê–≤—Ç–æ'])
def handle_whatch (message):
   user_markup = telebot.types.ReplyKeyboardMarkup (True)
   bot.send_message (message.from_user.id, '–î–æ–ø–æ–º–æ–≥–∞ –≤–∞–∂–ª–∏–≤–∞ —ñ —Å–æ–±—ñ —Ü–µ –ø—Ä—ñ–æ—Ä—ñ—Ç–µ—Ç! \n –î–ª—è —á–æ–≥–æ? –°–∏–ª–∞ —á–∞—Å—É —ñ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è, –º–µ–Ω–µ —ñ –≤–∞–≥–∏. \n –ö–æ–∂–Ω–æ–≥–æ –¥–Ω—è —è –Ω–µ –≤ —Ä—ñ–≤–Ω–∏—Ö –∑ —Å–æ–±–æ—é –≤ —Ä–∞–∑–∏ –∑—ñ —Ü—ñ—î—é —Å–∏–ª–æ—é ', reply_markup=user_markup)



@bot.message_handler (commands =['–©–æ_—Ä–æ–±–ª—é?'])
def handle_whatch (message):
   user_markup = telebot.types.ReplyKeyboardMarkup (True)
   bot.send_message (message.from_user.id, 'erfsefee–Ø —Ä–µ–∞–ª—ñ–∑–æ–≤—É—é —Ç–æ–ª–∫–æ–≤—ñ —Ä–µ—á—ñ -–ø—Ä–∞–≤–∞, –ø–∫, –∞–≤—Ç–æ, –¥—ñ–º, —Å—ñ–º—è —ñ –∑–∞—Ä–æ–±–ª—è—é –Ω–∞ —Ö–∂—É –æ–¥—è–≥ —ñ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ —â–æ–± –Ω–µ —Å—Ç—Ä–µ—Å—É–≤–∞—Ç–∏ - —è –∂ –ª—é–¥–∏–Ω–∞ ', reply_markup=user_markup)

@bot.message_handler (commands =['–ú–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó'])
def handle_manip (message):
   user_markup = telebot.types.ReplyKeyboardMarkup (True)
   bot.send_message (message.from_user.id, '–î–æ–≤—ñ—Ä–∞ - –Ω—ñ –ø—Ä–∏ —á–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —ó—ó –∑–∞—Å–ª—É–∂–∏—Ç–∏. –ü—Ä–æ–¥–∞–≤–µ—Ü—å - –ø—Ä–æ–¥–∞—î —â–æ –≤–∏–≥—ñ–¥–Ω–æ - % –∞–±–æ –Ω–µ –ø—Ä–æ–¥–∞—î—Ç—å—Å—è. \n –ö—Ä–∞—Å–∞ - –º—É—Ö–æ–º–æ—Ä —Ç–µ–∂ –∫—Ä–∞—Å–∏–≤–∏–π –∞–ª–µ –≤—ñ–Ω —Å–º–µ—Ä—Ç–µ–ª—å–Ω–∏–π  \n  –°—Ç–æ—Å—É–Ω–∫–∏: \n –°–ø–∞—Å–∏ –º–µ–Ω–µ –≤—ñ–¥ —Å–µ–±–µ \n –æ–±–µ—Å—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è \n —Å–∫—Ä–∏–≤–∞–Ω–Ω—è \n –î–æ —á–æ–≥–æ —Ç–∏ –º–µ–Ω–µ –ø—Ä–∏–º—É—Å–∏–≤', reply_markup=user_markup)

@bot.message_handler (commands =['–ë–∏–π_–∞–±–æ_–±—ñ–∂–∏'])
def handle_teranozavr (message):
   user_markup = telebot.types.ReplyKeyboardMarkup (True)
   bot.send_message (message.from_user.id, '–í–æ–Ω–∞ –∫—Ä–∏—Å–∏–≤–∞ - —Ä–æ–±–∏—à –≤–∏—â–∏–º –∑–∞ —Å–µ–±–µ –∞ —Å—Ç–æ—Å—É–Ω–∫–∏ —Ü–µ –∫–æ–ª–∏ —Ä—ñ–≤–Ω—ñ –∞ –Ω—É –Ω–æ—Ä–º–∞–ª—å–Ω–æ \n –ú–æ–∂–µ –±—É—Ç–∏ - –∫–∞–ø–∞—Ä–Ω–∏—Ü—è, –ø–µ—Ä–µ–∫—Ä—É—á—É–≤–∞—Ç–∏, –Ø –º–∞–ª–∞ —ñ–Ω—à–µ –Ω–∞ —É–≤–∞–∑—ñ, –ó–∞–ª–µ–∂–Ω–∏–º - —Ç–∏ –º–µ–Ω–µ –≤–∏—Å–ª—É—Ö–∞–≤ —ñ —è —Ö–æ—Ä–æ—à–∞ - —Ç–∏ –º–æ–ª–æ–¥–µ—Ü—å —â–æ —Ä–æ–±–∏—à –ø–æ –º–æ—î–º—É –∞ –≤–∏–∑–∏–≤–∞—é—á–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ —â–æ–± –∑–∞–≥–Ω–∞—Ç–∏ –≤ –ø–∞—Å—Ç–∫—É \n –•–∞—Ä–∞–∫—Ç–µ—Ä 1 –º—ñ—Å—Ü–µ - –ª—é–¥–∏–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è —Ç–µ—Å—Ç–∞–º–∏ - –û–ô –ø–∞–∫–∞', reply_markup=user_markup)


@bot.message_handler (commands =['–°—É–º–Ω–æ'])
def handle_sum (message):
   user_markup = telebot.types.ReplyKeyboardMarkup (True)
   bot.send_message (message.from_user.id, '–ö–æ–ª–∏ –ø–µ—Ä–µ–º—ñ–Ω–∏ —Ç–µ–∂ —Ç—Ä–µ–±–∞ –≤–º—ñ—Ç–∏ –∂–∏—Ç–∏ –∫–æ–ª–∏ —Å—Ç–∞—î –∫—Ä–∞—â–µ üòäüòäüòäüòä', reply_markup=user_markup)



@bot.message_handler (commands =['–†–∏–∑–∏–∫'])
def handle_risk (message):
   markup = types.ReplyKeyboardMarkup(True)
   item1 = types.KeyboardButton("randoms")
   item2 = types.KeyboardButton("üòä –Ø–∫ —Å–ø—Ä–∞–≤–∏?")
   item3 = types.KeyboardButton("50")
   item4 = types.KeyboardButton("/pass")

   markup.add(item1, item2, item3, item4)

   bot.send_message(message.chat.id, "–ù–µ–ø–æ–≤–Ω–∞ - —Å–ª–æ–∂–Ω—ñ—Å—Ç—å (–∫–æ–º—É–Ω–∞–ª–∫–∞) \n –±–∞—Ç—å–∫–∏ —Å—Ç—Ä—ñ—é—Ç—å —Å–∫–æ—Ä–æ —Ç—ñ–ª—å–∫–∏ —ó–º –ø–æ–º–∞–≥–∞—Ç–∏. ",
        parse_mode='html', reply_markup=markup)

@bot.message_handler (commands =['–í–∏—Ö—ñ–¥'])
def handle_tuda (message):
   user_markup = telebot.types.ReplyKeyboardMarkup (True)
   bot.send_message (message.from_user.id, '–ù–∞–π–∫—Ä–∞—â–µ —Å–∞–º–æ–º—É - –ö–æ–º–∞–Ω–¥–∞ - –±–∞–≥–∞—Ç–æ –ª—é–¥–µ–π –¥–ª—è –±–∞–≥–∞—Ç–æ –ª—é–¥–µ–π. –¢–æ–ª–∫–æ–≤—ñ –∑–Ω–∞–π–æ–º—ñ - –ö–æ–ª—è. –ë—ñ–∑–Ω–µ—Å - –≤—ñ–¥ 1000$ –∫—Ä—ñ–º –±–∞–∑–æ–≤–∏—Ö.', reply_markup=user_markup)

@bot.message_handler (commands =['–°—Ç–æ—Å—É–Ω–∫–∏'])
def handle_simya (message):
   user_markup = telebot.types.ReplyKeyboardMarkup (True)

   markup = types.ReplyKeyboardMarkup(True)
 
   item1 = types.KeyboardButton("/–û—Ü—ñ–Ω–∫–∞_–†–æ–∑–º–æ–≤–∏")
   item2 = types.KeyboardButton("/pass")
   markup.add(item1, item2)
   bot.send_message (message.from_user.id, '–í—Å–µ –ø—Ä–æ—Å—Ç–æ -—è–∫—â–æ —è —Å–µ–±–µ –ø–æ—á—É–≤–∞—é –¥–æ–±—Ä–µ —Ç–æ –æ–∫ —è–∫—â–æ —è–∫–µ—Å—å –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ —Ç–æ –ø–∞–∫–∞ \n –ú–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó - —á–æ–ª–æ–≤—ñ–∫–∏ –º–∞—é—Ç—å... \n –î–∞–≤–ª—è—Ç—å –Ω–∞ –µ–º–æ—Ü—ñ—ó –ø–µ—Ä–µ–∫—Ä—É—á—É—é—Ç—å - –≤–æ–¥–∏ –Ω–µ –∂–∞–ª—ñ—é—Ç—å - –π–ª–∏ –≤ –º–∞–≥–∞–∑ —Å–∫–∞–∂–∏ —Ç–∞–∫ \n –ë–∞—á–∏—Ç–∏ –∫–æ–ª–∏ —Å–ø–æ–∫—ñ–π–Ω–æ –º–∞–ª–µ–Ω—å–∫—ñ –∑–Ω–∞–∫–∏ –≤–µ–ª–∏–∫–æ–≥–æ. –ù–∞–≤—è–∑–ª–∏–≤—ñ—Å—Ç—å - —â–æ—Å—å –¥—É–∂–µ –Ω–µ —Ç–∞–∫. \n –Ø –ø–æ–¥—É–º–∞—é - –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —ñ –Ω–µ–ø–æ–≤–∞–≥–∞. \n –§–æ—Ç–æ —Å–∞–º–æ—ó - –≥–∞—á–æ–∫. \n –ü–æ—á–∞—Ç–æ–∫ –∑ –ø–æ–Ω–æ—Ü—ñ–Ω–∏—Ö –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç–µ–π - –¥–æ–ø–æ–º–æ–≥–∞ –ª—é–¥–∏–Ω–∞ –ø—Ä–∏–π–º–∞—î –±–æ –≤–∏–∂–∏–≤–∞—î –∞ –ø–æ—Ç—ñ–º –≤–∫–ª—é—á–∞—é—Ç—å—Å—è —Å–ø—Ä–∞–≤–∂–Ω—ñ —Ü—ñ–ª—ñ - —Ç–æ–±—Ç–æ —Ç–∏ –Ω–µ–∑–Ω–∞—î –∑ –∫–∏–º –º–∞—î—à —Å–ø—Ä–∞–≤—É)', reply_markup=markup)






@bot.message_handler (commands =['–ü–æ–ª—ñ—Ç–∏–∫–∞'])
def handle_pol (message):
   user_markup = telebot.types.ReplyKeyboardMarkup (True)
   bot.send_message (message.from_user.id, '–ô–¥—É—Ç—å - –ë–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ (–£–∫—Ä–∞—ó–Ω–∞ - –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ—è. –∞—Ä–º—ñ—è. –æ–±–æ–≤—è–∑–∫–∏) —ñ –∑–∞—Ö–∏—â–∞—é—Ç—å —Å–µ–±–µ –≤—ñ–¥ –≤–ø–ª–∏–≤—É  —ñ —Å—Ç–æ—è—Ç—å —É –ø–æ—Ç–æ–∫—É –≤–ø–ª–∏–≤—É —ñ –∑–∞—Ö–∏—â–∞—é—Ç—å —Å–≤–æ—ó —ñ–Ω—Ç–µ—Ä–µ—Å–∏ –∑–∞–∫–æ–Ω–Ω–æ –∞ —Ç–∏ –≤–∏–∫–æ–Ω—É–π –∑–∞–∫–æ–Ω', reply_markup=user_markup)



@bot.message_handler (commands =['–ö—Ä–µ–¥–∏—Ç'])
def handle_money (message):
   user_markup = telebot.types.ReplyKeyboardMarkup (True)
   bot.send_message (message.from_user.id, '–ó–∞ —Ç–µ–ª–µ—Ñ–æ–Ω 6000 –ø–µ—Ä–µ–ø–ª–∞—Ç–∞ 1000 + 800 –≥—Ä–Ω –∑–∞ —ñ —Ä—ñ–∫ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂—ñ. –Ü —è –≤—Ç—Ä–∞—á–∞—é 1800 –∞ –ª—é–¥–∏–Ω–∞ –±–µ–∑ –∫—Ä–µ–¥–∏—Ç—É 800', reply_markup=user_markup)


@bot.message_handler (commands =['–†–æ–∑–≤–∏—Ç–æ–∫'])
def handle_progres (message):
   user_markup = telebot.types.ReplyKeyboardMarkup (True)
   bot.send_message (message.from_user.id, '–õ—é–¥–∏ - –Ω–µ –ª–æ–≥—ñ–∫–∞ –∞ —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ñ—Å—Ç—å, –ü–µ—Ä–µ–∫–æ–Ω–∞–Ω–Ω—è - –í–æ–±—Ö—ñ–¥, –°–∏–ª–∞ - –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –ª—ñ–Ω—å ', reply_markup=user_markup)

@bot.message_handler (commands =['–ü–ª–∞—Ç–æ'])
def handle_plato (message):
   user_markup = telebot.types.ReplyKeyboardMarkup (True)
   bot.send_message (message.from_user.id, '–†–æ–±–∏—Ç–∏ –Ω–∞ –¥–∂–∏–Ω—Å–∏,—Ä–µ–º—ñ–Ω—å,—à–æ—Ä—Ç–∏ —ñ –Ω–∞ —Ç–æ–ª–∫–æ–≤—ñ —Ä–µ—á—ñ –Ω–µ —Ö–≤–∞—Ç–∞—î - —Å—Ç—Ä–µ—Å 1 –∞–±–æ 2', reply_markup=user_markup)








@bot.message_handler (commands =['–ú–∞–ª–µ–Ω—å–∫–∞_–≤–∏—Ç—Ä–∞—Ç–∞?'])
def handle_vitrata (message):

   

   markup = types.ReplyKeyboardMarkup(True)

   item1 = types.KeyboardButton("50")
   item2 = types.KeyboardButton("/pass")

   markup.add(item1, item2)

   bot.send_message (message.from_user.id, '50 –≥—Ä–Ω? (–º–∏–Ω—É–ª–µ 1500) - (–Ø –Ω–µ –ª—é–¥–∏–Ω–∞? 50+300 –≥—Ä–Ω) (—Å—É–º–∞ 3000) - (—Ç–æ–ª–∫–æ–≤—ñ 1750) - –º–∞–π–±—É—Ç–Ω—î', reply_markup=markup)
   #next step
  
   bot.send_message (message.from_user.id, "–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ", reply_markup=markup)
   bot.send_message (message.from_user.id, "c", reply_markup=markup)
   bot.send_message (message.from_user.id, "–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ", reply_markup=markup)




      
  


@bot.message_handler (commands =['–ü—Ä–∏–±–∏—Ä–∞–Ω–Ω—è'])
def handle_chisto (message):
   user_markup = telebot.types.ReplyKeyboardMarkup (True)
   bot.send_message (message.from_user.id, '–í box –∞–±–æ –∑–∞–∫—Ä–∏—Ç–æ, –∑–∞–±—Ä–∞–≤ –±–æ–∫—Å —ñ –ø—Ä–æ—Ç–µ—Ä', reply_markup=user_markup)
   

@bot.message_handler (commands =['–†–æ–±–æ—Ç–∞'])
def handle_work (message):
   user_markup = telebot.types.ReplyKeyboardMarkup (True)
   bot.send_message (message.from_user.id, '–ó—Ä–æ–±–∏—Ç–∏ –ü—Ä–∞–π—Å IT', reply_markup=user_markup)


@bot.message_handler (commands =['–ó–∞—Ä—è–¥–∫–∞'])
def handle_zara (message):
   user_markup = telebot.types.ReplyKeyboardMarkup (True)
   bot.send_message (message.from_user.id, '–í–µ–ª–∏–∫—ñ –¥–æ–≤–≥—ñ –º–æ–º–µ–Ω—Ç–∏, —Ñ–æ–∫—É—Å –æ–∫—Ä—ñ–º —Ä–æ–±–æ—Ç–∏', reply_markup=user_markup)


@bot.message_handler (commands =['/–ñ–∞—Ä–∫–æ'])
def handle_sums (message):
   user_markup = telebot.types.ReplyKeyboardMarkup (True)
   bot.send_message (message.from_user.id, ' tstndsd', reply_markup=user_markup)



   

#END –î–ª—è –º–µ–Ω—é

# –æ–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.chat.type == 'private':
        if message.text == 'randoms':
            bot.send_message(message.chat.id, str(random.randint(0,100)))
        elif message.text == 'üòä –Ø–∫ —Å–ø—Ä–∞–≤–∏?':
 
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
      
 
            markup.add(item1)
 
            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∞–º –∫–∞–∫?', reply_markup=markup)

   
        if message.text == '50':
           bot.send_message(message.chat.id, "–º–∏–Ω—É–ª–µ \n —Å—É–º–∞ {str_a} \n –º–∞–π–±—É—Ç–Ω—î")
          
        if message.text == "10000":
            str_a = message.text
            b = 10
            c = int(str_a) + b
            print ("The value of c = ",c)
            bot.send_message (message.from_user.id, c)

        if message.text == '/–Ø–∫_—Å–ø—Ä–∞–≤–∏? ‚úî':
 
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–î—É–∂–µ –¥–æ–±—Ä–µ üôÉ", callback_data='good')
            item2 = types.InlineKeyboardButton("–°—É–º–Ω–æ üòî", callback_data='sadly')
            item3 = types.InlineKeyboardButton("–°—Ç–æ—Å—É–Ω–∫–∏ üßê", callback_data='relations')
            item4 = types.InlineKeyboardButton("–ü–æ–≥–∞–Ω–æ üò•", callback_data='bad')
 
            markup.add(item1, item2, item3,item4)
 
            bot.send_message(message.chat.id, '–ë—É–¥–µ–º–æ –≤–∏—Ä—É–ª—é–≤–∞—Ç–∏ üòäüòäüòä', reply_markup=markup)



 # –ø—Ä–æ—Å–ª—É—à–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
         # Levl_2 
        if call.message:
            if call.data == 'good':
               bot.send_message(call.message.chat.id, '–û—Ç —ñ –∑–¥–æ—Ä–æ–≤–æ üòä')
            
               markup = types.InlineKeyboardMarkup(row_width=2)
               item1 = types.InlineKeyboardButton("–ú–µ—Ä—Ç–≤–∞ –∑–æ–Ω–∞", callback_data='goods')
               
 
               markup.add(item1)
               bot.send_message(call.message.chat.id, '–†—É—Ö–∞—î–º–ª—Å—å –¥–∞–ª—å—à–µ', reply_markup=markup)

              
            elif call.data == 'bad':

                 bot.send_message(call.message.chat.id, '–í–ø–æ—Ä–∞—î–º–æ—Å—å üòä')
            
                 markup = types.InlineKeyboardMarkup(row_width=2)
                 item1 = types.InlineKeyboardButton("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", callback_data='bad1')
                 item2 = types.InlineKeyboardButton("–û—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è", callback_data='bad2')
                 item3 = types.InlineKeyboardButton("–≤'—è–ª—ñ—Å—Ç—å", callback_data='bad3')
                 
 
                 markup.add(item1, item2,item3)
                 bot.send_message(call.message.chat.id, '–†—É—Ö–∞—î–º–ª—Å—å –¥–∞–ª—å—à–µ', reply_markup=markup)



@bot.message_handler (commands =['–û—Ü—ñ–Ω–∫–∞_–†–æ–∑–º–æ–≤–∏'])
def handle_pol (message):
   user_markup = telebot.types.ReplyKeyboardMarkup (True)
   bot.send_message (message.from_user.id, '—Å—ñ–≤—ñ', reply_markup=user_markup)
                 

         # Levl_3  
        if call.message:
            if call.data == 'goods':
               bot.send_message(call.message.chat.id, '–°–ª–∞–≤–Ω–æ üòä')
               bot.send_message(call.message.chat.id, '–í—Å–µ –≤ —Ü—å–æ–º—É —Å–≤—ñ—Ç—ñ –∑–∞–¥—è–∫–∏ —ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ª—é–¥–µ–π')           



            if call.data == 'bad1':
               bot.send_message(call.message.chat.id, '–í–ø–æ—Ä–∞—î–º–æ—Å—å üòä')

                           
               markup = types.InlineKeyboardMarkup(row_width=2)
               item1 = types.InlineKeyboardButton("–ñ–∞—Ä–∫–æ", callback_data='C_plus')
               item2 = types.InlineKeyboardButton("–•–æ–ª–æ–¥–Ω–æ", callback_data='C_minus')
 
               markup.add(item1, item2)

               bot.send_message(call.message.chat.id, 'adsdasa', reply_markup=markup)           



         # Levl_4
        if call.message:
            if call.data == 'C_plus':
               bot.send_message(call.message.chat.id, '–ó–Ω–∞—á–∏—Ç—å —Ç–æ–±—ñ ü•µ')

                           
               markup = types.InlineKeyboardMarkup(row_width=2)
               item1 = types.InlineKeyboardButton("–î–µ–Ω—å", callback_data='C_p_day')
               item2 = types.InlineKeyboardButton("–í–µ—á—ñ—Ä_–Ω—ñ—á", callback_data='C_p_night')
 
               markup.add(item1, item2)

               bot.send_message(call.message.chat.id, '–í—Å–µ –≤ —Ü—å–æ–º—É —Å–≤—ñ—Ç—ñ –∑–∞–¥—è–∫–∏ —ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ª—é–¥–µ–π', reply_markup=markup)           

            if call.data == 'C_minus':
               bot.send_message(call.message.chat.id, '–ó–Ω–∞—á–∏—Ç—å —Ç–æ–±—ñ ü•∂')

                           
               markup = types.InlineKeyboardMarkup(row_width=2)
               item1 = types.InlineKeyboardButton("–î–µ–Ω—å", callback_data='C_m_day')
               item2 = types.InlineKeyboardButton("–í–µ—á—ñ—Ä_–Ω—ñ—á", callback_data='C_m_night')
 
               markup.add(item1, item2)

               bot.send_message(call.message.chat.id, "dfdf", reply_markup=markup)           


         # Levl_5
        if call.message:
            if call.data == 'C_p_day':
               bot.send_message(call.message.chat.id, '–û–ª–¥—è–≥–Ω–∏ —à–æ—Ä—Ç–∏ —ñ —Å–∫–∏–Ω—å –∫–æ—Ñ—Ç—É \n –ø–æ–ø–∏–π –≤–æ–¥–∏')

                           
               






 # remove inline buttons
         # bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–≤–∏–π–ª–æ", 
          
          #reply_markup=None)





            # show alert
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!!11")
 
    except Exception as e:
        print(repr(e))

def new_func1(call, markup):
    new_var = new_func(call, markup)
    new_var

def new_func(call, markup):
    bot.send_message(call.message.chat.id, 'Ye lfdfjq', reply_markup=markup)









bot.polling (none_stop=True, interval=0)


